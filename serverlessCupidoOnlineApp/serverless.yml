service: serverlessCupidoOnlineApp

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  profile: pereirafabio
  stage: dev
  region: sa-east-1
  environment:
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileBucketName}
    DYNAMODB_POSTS_TABLE_NAME: ${self:custom.postsTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - ses:*
      Resource: "*"
  apiGateway:
    apiKeys:
      - free:
          - myFreeKey
          - ${self:provider.stage}-myFreeKey
      - paid:
          - myPaidKey
          - ${self:provider.stage}-myPaidKey
    usagePlan:
      - free:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            burstLimit: 5
            rateLimit: 20
      - paid:
          quota:
            limit: 10000
            period: MONTH
          throttle:
            burstLimit: 50
            rateLimit: 200

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  appName: serverless-cupido-online-app
  postsTableName: posts-table-${self:custom.appName}-${self:provider.stage}
  fileBucketName: s3-file-bucket-${self:custom.appName}-${self:provider.stage}
  s3Sync:
    - bucketName: ${self:custom.fileBucketName}-demo
      localDir: uploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          private: true
  createPost:
    handler: lambdas/endpoints/createPost.handler
    events:
      - http:
          path: create-post/{ID}
          method: POST
          cors: true
          private: true
  updatePost:
    handler: lambdas/endpoints/updatePost.handler
    events:
      - http:
          path: update-post/{ID}
          method: PUT
          cors: true
          private: true
  getPost:
    handler: lambdas/endpoints/getPost.handler
    events:
      - http:
          path: get-post/{ID}
          method: GET
          cors: true
          private: true
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true

resources:
  Resources:
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileBucketName}-demo
